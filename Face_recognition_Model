# author: Mohamed Farag Mohamed , Mazen Mohamed Mohamed

# I modified this Python AI model for face recognition to suit my specific needs. 
# The project handles face recognition by processing images and comparing them to stored data.
# It supports features like matching faces against a database and validating identities. 
# The system is designed for continuous improvement and updates, incorporating various techniques and libraries for efficient performance.

# This is the original face_recognition file, available for use in other applications or projects.
--------------------------------------------------------------------------------------------------------------------------------------------------
#!/usr/bin/env python
# coding: utf-8

# In[1]:


import face_recognition
import os
import cv2
import numpy as np 
import glob


# In[2]:


class SimpleFacerec:
    def __init__(self):
        self.known_face_encodings = []
        self.known_face_names = []
        
        #Resize frame for faster speed
        self.frame_resizing=0.25
        
    def load_encoding_images(self,images_path):
        """
        Load encoding images from path
        :param images_path
        :return:
        """
        #Load images
        image_path=glob.glob(os.path.join(images_path,"*.*"))
        
        print("{} encoding images found.".format(len(image_path)))
        
         #store image encoding and names
        for img_pth in image_path:
            img=cv2.imread(img_pth)
            rgb_img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
            
            #Get file name only from path
            basename=os.path.basename(img_pth)
            (filename,ext)=os.path.splitext(basename)
            #Get encoding
            img_encoding=face_recognition.face_encodings(rgb_img)[0]
            
            #Store file name and file encoding
            self.known_face_encodings.append(img_encoding)
            self.known_face_names.append(filename)
        print('encoding image loaded')    
    
    def detect_known_faces(self,frame):
        small_frame=cv2.resize(frame,(0,0), fx=self.frame_resizing, fy=self.frame_resizing)
        #find face and encoding in the current frame of video
        #convert the img fror BGR to RGB
        rgb_small_frame=cv2.cvtColor(small_frame,cv2.COLOR_BGR2RGB)
        face_locations=face_recognition.face_locations(rgb_small_frame)
        face_encodings=face_recognition.face_encodings(rgb_small_frame,face_locations)
        
        face_names = []
        for face_encoding in face_encodings:
            #see if the face is match for the known face(s)
            matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)
            name = 'Unknown'
            
            #use the knonw face with the smallest distance
            face_distance = face_recognition.face_distance(self.known_face_encodings,face_encoding)
            best_match_index = np.argmin(face_distance)
            if matches [best_match_index]:
                name = self.known_face_names[best_match_index]
            face_names.append(name)
            
        # convert to numpy array to adjust coordinates with frame resizing
        face_locations = np.array(face_locations)
        face_locations = face_locations/self.frame_resizing
        return face_locations.astype(int), face_names
             
        
       
        


# In[3]:


#encode faces from folder
sfr=SimpleFacerec()
sfr.load_encoding_images('images')

#load camera
cap=cv2.VideoCapture(0)

while True:
    ret,frame = cap.read()
    
    # Detect Faces
    face_locations,face_names = sfr.detect_known_faces(frame)
    for face_loc, name in zip(face_locations,face_names):
        y1,x2,y2,x1 = face_loc[0], face_loc[1], face_loc[2], face_loc[3]
        
        cv2.putText(frame, name,(x1, y1 - 10), cv2.FONT_HERSHEY_DUPLEX, 1, (0,255,0), 2)
        cv2.rectangle(frame, (x1,y1), (x2,y2), (0,0,200), 4)
    
    cv2.imshow('Frame',frame)
    key=cv2.waitKey(1)
    if key==27:
        break
        
        
cap.release()
cv2.destroyAllWindows()
    
    
 







